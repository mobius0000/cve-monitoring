#!/bin/bash - 
#===============================================================================
#
#          FILE: cve-get.sh
# 
#         USAGE: ./cve-get.sh 
# 
#   DESCRIPTION: 
# 
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: möbius (), 
#  ORGANIZATION: 
#       CREATED: 08/08/2019 15:04
#      REVISION:  ---
#===============================================================================


#-------------------------------------------------------------------------------
# variables
#-------------------------------------------------------------------------------

dataFolder=$(pwd)/cveCatalog
elasticScript=$(pwd)/elasticScript.py

n=$(( $RANDOM % 6 +1 ))

declare -a colors='(
	[0]="\e[1;m"
	[1]="\e[1;31m"
	[2]="\e[1;32m"
	[3]="\e[1;33m"
	[4]="\e[1;34m"
	[5]="\e[1;35m"
	[6]="\e[1;36m"
	[7]="\e[1;37m"
)'


url='https://nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-201'


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  createMessage
#   DESCRIPTION:  
#    PARAMETERS:  $url (CVE provide by Nist)
#       RETURNS:  
#-------------------------------------------------------------------------------
function createMessage()
{
	if [[ $# -eq 2 ]]
		then
			case "${1,,}" in 
				0|'ok')
					echo -e "${colors[2]}$(date "+%m/%d/%y %H:%M:%S") - ${2,,}.${colors[0]}"
				;;
				1|'warn')
					echo -e "${colors[3]}$(date "+%m/%d/%y %H:%M:%S") - ${2,,}.${colors[0]}"
				;;
				2|'err')
					echo -e "${colors[1]}$(date "+%m/%d/%y %H:%M:%S") - ${2,,}.${colors[0]}"
				;;
				3|'info')
					echo -e "${colors[4]}$(date "+%m/%d/%y %H:%M:%S") - ${2,,}.${colors[0]}"
				;;
				4|'banner')
					n=$(( $RANDOM % 6 +1 ))
					echo -e "${colors[n]}#-------------------------------------------------------------------------------\n#\t\t$(date "+%m/%d/%y %H:%M:%S") -  ${2^^}\n#-------------------------------------------------------------------------------${colors[0]}\n"

				;;
				*)
					echo -e "${colors[1]}$(date "+%m/%d/%y %H:%M:%S") - An error occurred..${colors[0]}"
				;;
			esac
		else
			echo -e "${colors[1]}$(date "+%m/%d/%y %H:%M:%S") - An error occurred.${colors[0]}"
	fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  downloadCve
#   DESCRIPTION:  download all cve into dataFolder (default: cveCatalog)
#    PARAMETERS:  $url (CVE provide by Nist)
#       RETURNS:  
#-------------------------------------------------------------------------------

function downloadCve(){

	if [[ $# -ne 1 ]]
		then
			createMessage 'err' 'An error occurred'
			exit 1
	fi
	
	for i in {1..100} 
	do
			# set url with autoincrement (date) 
			urlCve="$1$i.json.gz"

			# test url cve
			if [[ $(wget -S --spider "$urlCve" 2>&1 |grep -i 'HTTP/1.1 200 OK') ]]
				then 
					createMessage 'ok' "url -> $urlCve reachable"
					if [[ ! -d $dataFolder ]]
						 then 
							createMessage 'warn' "create folder -> $dataFolder"
							mkdir -p "$dataFolder"
			 		fi
					
					# download CVEs
					if [[ ! -f "$dataFolder/cve-201$i.json.gz" ]]
						then
							wget -q $urlCve -O "$dataFolder/cve-201$i.json.gz"
					else
							createMessage 'warn' "CVE 201$i already exists"
					fi
					
			else
				createMessage 'err' "url not reachable -> $urlCve"
				echo -e "\n"
				let i=$i-1
				createMessage 'info' "Last CVE : 201$i"
				break
				#exit 1
			fi	
	done
}


function extractCve()
{
	if [[ $(find  "$dataFolder" -type f -name '*.gz'|wc -l) -gt 2 ]]
		then 
			for i in $(ls $dataFolder/*.gz)
			do
				createMessage 'warn' "please wait -> extracting $i"
				gunzip -kf $i
			done
			echo -e "\n"

	else
		createMessage 'err' 'Files not found'
		exit 1
	fi
}


function indexElasticsearch()
{
	if [[ ! -f elasticScript ]];
		then
			echo $dataFolder/*.json
			for i in $(ls $dataFolder/*.json)
			do	
				createMessage 'warn' "please wait -> indexing $i"
				/usr/bin/python3.7 $(pwd)/elasticScript.py $i
			done
	else
		createMessage 'err' 'Script elasticsearch not found'
		exit 1
	fi

}



function checkService()
{

	declare -a services='([0]="elasticsearch" [1]="kibana")'

	for service in ${services[*]}
	do 
		createMessage 'warn' "check state $service"
		if [[ $(systemctl status $service |sed -n 's#^\s*Active:\s\([^ ]*\).*$#\1#p') != 'active' ]]
			then 
				createMessage 'err' "An error occurred : service $service not ready"
				read -p "Do you want to start $service ? [y/N] " choice

				choice=${choice:-'no'}

				if [[ ${choice,,} == 'yes' ]] || [[ $choice == 'y' ]]
					then
						systemctl start $service 
					else 
						createMessage 'err' 'This script will be stopped'
						exit 1
				fi
			else
				createMessage 'ok' "service $service is started"
		fi
	done
	
}


#-------------------------------------------------------------------------------
# MAIN
#-------------------------------------------------------------------------------

clear ; echo -e """

${colors[$n]}

██╗██╗      ██████╗ ██╗   ██╗███████╗ ██████╗██╗   ██╗███████╗
██║██║     ██╔═══██╗██║   ██║██╔════╝██╔════╝██║   ██║██╔════╝
██║██║     ██║   ██║██║   ██║█████╗  ██║     ██║   ██║█████╗  
██║██║     ██║   ██║╚██╗ ██╔╝██╔══╝  ██║     ╚██╗ ██╔╝██╔══╝  
██║███████╗╚██████╔╝ ╚████╔╝ ███████╗╚██████╗ ╚████╔╝ ███████╗
╚═╝╚══════╝ ╚═════╝   ╚═══╝  ╚══════╝ ╚═════╝  ╚═══╝  ╚══════╝
                                                              

---------------------------------------------

${colors[$n+2]}date : ${colors[$n-1]}$(date)
${colors[$n]}user : ${colors[$n+1]}$(whoami)${colors[0]}${colors[0]}


[ @author: MOBIUS ; GPLv3 ]

"""

createMessage 'banner' 'Download CVEs'
downloadCve  "$url"
createMessage 'banner' 'Extract CVEs'
extractCve
createMessage 'banner' 'Check services'
#checkService
createMessage 'banner' 'Index CVEs'
indexElasticsearch
